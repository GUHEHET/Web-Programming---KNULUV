/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-07-01 20:14:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=pg43l9dp5c\"></script>\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\"\r\n");
      out.write("\trel=\"stylesheet\" id=\"bootstrap-css\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/profile.css\">\r\n");
      out.write("<script src=\"https://www.gstatic.com/firebasejs/7.15.5/firebase-app.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://www.gstatic.com/firebasejs/7.15.5/firebase-analytics.js\"></script>\r\n");
      out.write("<script src=\"https://www.gstatic.com/firebasejs/7.15.5/firebase-auth.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://www.gstatic.com/firebasejs/7.15.5/firebase-firestore.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://www.gstatic.com/firebasejs/7.15.5/firebase-database.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://www.gstatic.com/firebasejs/7.15.5/firebase-storage.js\"></script>\r\n");
      out.write("<title>View Other User</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"map\" style=\"width: 100%; height: 100vh\"></div>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar Request = function() {\r\n");
      out.write("\t\t\tthis.getParameter = function(name) {\r\n");
      out.write("\t\t\t\tvar rtnval = '';\r\n");
      out.write("\t\t\t\tvar nowAddress = unescape(location.href);\r\n");
      out.write("\t\t\t\tvar parameters = (nowAddress.slice(nowAddress.indexOf('?') + 1,\r\n");
      out.write("\t\t\t\t\t\tnowAddress.length)).split('&');\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < parameters.length; i++) {\r\n");
      out.write("\t\t\t\t\tvar varName = parameters[i].split('=')[0];\r\n");
      out.write("\t\t\t\t\tif (varName.toUpperCase() == name.toUpperCase()) {\r\n");
      out.write("\t\t\t\t\t\trtnval = parameters[i].split('=')[1];\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn rtnval;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar request = new Request();\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// create naver map object\r\n");
      out.write("\t\tvar map = new naver.maps.Map('map', {\r\n");
      out.write("\t\t\tcenter : new naver.maps.LatLng(35.889845, 128.6105),\r\n");
      out.write("\t\t\tzoom : 17,\r\n");
      out.write("\t\t\tminZoom : 17\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//다른 사람 좌표 찍기 \r\n");
      out.write("\t\tvar Name = request.getParameter(\"Name\");\r\n");
      out.write("\t\tvar firebaseConfig = {\r\n");
      out.write("\t\t\tapiKey : \"AIzaSyBaW4hPPV0Pdz6QoXxX1USFIijUgJhqQUg\",\r\n");
      out.write("\t\t\tauthDomain : \"webprogramming-df368.firebaseapp.com\",\r\n");
      out.write("\t\t\tdatabaseURL : \"https://webprogramming-df368.firebaseio.com\",\r\n");
      out.write("\t\t\tprojectId : \"webprogramming-df368\",\r\n");
      out.write("\t\t\tstorageBucket : \"webprogramming-df368.appspot.com\",\r\n");
      out.write("\t\t\tmessagingSenderId : \"359102557982\",\r\n");
      out.write("\t\t\tappId : \"1:359102557982:web:07aca8db80567b3d06e30f\",\r\n");
      out.write("\t\t\tmeasurementId : \"G-4198BS2X0J\"\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// Initialize Firebase\r\n");
      out.write("\t\tfirebase.initializeApp(firebaseConfig);\r\n");
      out.write("\t\tfirebase.analytics();\r\n");
      out.write("\t\tvar database = firebase.database();\r\n");
      out.write("\t\tvar storage = firebase.storage().ref('img/');\r\n");
      out.write("\t\tvar people = database.ref('people');\r\n");
      out.write("\t\tvar temp_x;\r\n");
      out.write("\t\tvar temp_y;\r\n");
      out.write("\t\tvar temp_age;\r\n");
      out.write("\t\tvar temp_department;\r\n");
      out.write("\t\tvar temp_name;\r\n");
      out.write("\t\tvar temp_sex;\r\n");
      out.write("\t\tvar temp_text;\r\n");
      out.write("\t\tvar img;\r\n");
      out.write("\t\tvar i=0;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar nameList = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tpeople.on('value', function(snapshot) {\r\n");
      out.write("\t\t\tsnapshot.forEach(function(childSnapshot) {\r\n");
      out.write("\t\t\t\tvar childKey = childSnapshot.key;\r\n");
      out.write("\t\t\t\tvar childData = childSnapshot.val();\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\tif (childKey != Name){\r\n");
      out.write("\t\t\t\t\t//console.log(childKey);\r\n");
      out.write("\t\t\t\t\t//find_xy(childKey);\r\n");
      out.write("\t\t\t\t\tvar people_x = database.ref('xy/' + childKey);\r\n");
      out.write("\t\t\t\t\tpeople_x.once('value', function(snapshot) {\r\n");
      out.write("\t\t\t\t\t\ttemp_x = snapshot.val().x;\r\n");
      out.write("\t\t\t\t\t\ttemp_y = snapshot.val().y;\r\n");
      out.write("\t\t\t\t\t\ttemp_age = childSnapshot.val().user_age;\r\n");
      out.write("\t\t\t\t\t\ttemp_department = childSnapshot.val().user_department;\r\n");
      out.write("\t\t\t\t\t\ttemp_name = childSnapshot.val().user_name;\r\n");
      out.write("\t\t\t\t\t\ttemp_sex = childSnapshot.val().user_sex;\r\n");
      out.write("\t\t\t\t\t\ttemp_text = childSnapshot.val().user_text;\r\n");
      out.write("\t\t\t\t\t\tcreate_symbol(temp_age, temp_department, temp_name, temp_sex, temp_text, temp_x, temp_y, childKey);\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tnameList.push(childKey);\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//function find_xy(name){\r\n");
      out.write("\t\t//\tvar people_x = database.ref('xy/' + name);\r\n");
      out.write("\t\t//\tpeople_x.once('value', function(snapshot) {\r\n");
      out.write("\t\t//\t\ttemp_x = snapshot.val().x;\r\n");
      out.write("\t\t//\t\ttemp_y = snapshot.val().y;\r\n");
      out.write("\t\t//\t});\r\n");
      out.write("\t\t//}\r\n");
      out.write("\t\tvar markerList = [], infoWindowList = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction create_symbol(age, department, name, sex, text, x, y, childKey){\r\n");
      out.write("\t\t\tvar str;\r\n");
      out.write("\t\t\tif(sex == 1)\r\n");
      out.write("\t\t\t\tstr = '남자';\r\n");
      out.write("\t\t\telse\r\n");
      out.write("\t\t\t\tstr = '여자';\r\n");
      out.write("\t\t\tstorage.child(childKey+'.png').getDownloadURL().then(function(url){\r\n");
      out.write("\t\t\t\timg = url;\r\n");
      out.write("\t\t\tvar latLngs = new naver.maps.LatLng(x,y);\r\n");
      out.write("\t\t\tvar contentStr = [\r\n");
      out.write("\t\t\t\t'<div class=\"container\">',\r\n");
      out.write("\t\t\t\t'<div style=\"width:400px; height:280px;\">', //  class=\"row\"\r\n");
      out.write("\t\t\t\t'<div >', //class=\"col-xs-12 col-sm-6 col-md-6\"\r\n");
      out.write("\t\t\t\t'<div >', //class=\"well well-sm\"\r\n");
      out.write("\t\t\t\t'<div class=\"row\">',\r\n");
      out.write("\t\t\t\t'<div>', // class=\"col-sm-6 col-md-4\"\r\n");
      out.write("\t\t\t\t'<img src='+img+' alt=\"\" width=\"200\" align=\"left\" hspace=\"5\" />', //class=\"img-rounded img-responsive\"\r\n");
      out.write("\t\t\t\t'<h4>'+name+'</h4>',\r\n");
      out.write("\t\t\t\t'</i></cite></small>',\r\n");
      out.write("\t\t\t\t'<p>',\r\n");
      out.write("\t\t\t\t'생년월일: '+age+'</p>',\r\n");
      out.write("\t\t\t\t'학과: '+department+'</p>',\r\n");
      out.write("\t\t\t\t'성별: '+str+'</p>',\r\n");
      out.write("\t\t\t\t'소개: '+text+'</p>',\r\n");
      out.write("\t\t\t\t'<div class=\"btn-group\">',\r\n");
      out.write("\t\t\t\t'<button type=\"button\" class=\"btn btn-primary\" onclick=' + \"chat(\\'\" + childKey + \"\\')\" + '>chat</button>',\r\n");
      out.write("\t\t\t\t'</div>','</div>', '</div>', '</div>', '</div>', '</div>',\r\n");
      out.write("\t\t\t\t'</div>' ].join('');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\tmarker = new naver.maps.Marker({\r\n");
      out.write("\t\t\t\t\tposition : latLngs,\r\n");
      out.write("\t\t\t\t\tmap : map,\r\n");
      out.write("\t\t\t\t//icon:icon,\r\n");
      out.write("\t\t\t\t//animation :naver.maps.Animation.BOUNCE,\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar infowindow = new naver.maps.InfoWindow({\r\n");
      out.write("\t\t\t\t\tcontent : contentStr\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tnameList.push(childKey);\r\n");
      out.write("\t\t\t\tmarkerList.push(marker);\r\n");
      out.write("\t\t\t\tinfoWindowList.push(infowindow);\r\n");
      out.write("\t\t\t\tmarker = null;\r\n");
      out.write("\t\t\t\tinfowindow = null;\r\n");
      out.write("\t\t\t\tnaver.maps.Event.addListener(markerList[i], 'click', getClickHandler(i));\r\n");
      out.write("\t\t\t\ti++;\r\n");
      out.write("\t\t\t// add click listener in marker\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction getClickHandler(num) {\r\n");
      out.write("\t\t\treturn function(e) {\r\n");
      out.write("\t\t\t\tvar marker = markerList[num], infoWindow = infoWindowList[num];\r\n");
      out.write("\t\t\t\tif (infoWindow.getMap()) {\r\n");
      out.write("\t\t\t\t\tinfoWindow.close();\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tinfoWindow.open(map, marker);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction chat(other){\r\n");
      out.write("\t\t\twindow.open(\"jstalktheme.html?myName=\" + Name + '&other=' + other, \"chat\", \"width=350, height=500, left=100, top=50\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
